package Classes {		import flash.display.Sprite;	import Classes.Utilities.*;	import flash.events.MouseEvent;	import flash.net.URLRequest;	import flash.display.Loader;	import flash.events.ProgressEvent;	import flash.events.Event;	import flash.events.IOErrorEvent;	import com.greensock.TweenLite;	import flash.display.MovieClip;		//image size is 800x372	public class ImageContainer extends Sprite {				//global variables about the image		public var file:String;		public var imgTitle:String;		public var imgCaption:String;				//variables to load in full size image		public var req:URLRequest;		public var loader:Loader = new Loader();				//constructor function for the image container contains information that is passed from thumbnail, to the document class which creates this		public function ImageContainer(filename:String, title:String, caption:String, imgNumber:uint, totalImages:uint) {						//check that our image container has been created			trace("| --- Image Container Launched --- |");						//globalize variables passed from the constructor			file = filename;			imgTitle = title;			imgCaption = caption;						//load in the image, make sure there are no errors, and update the preloader as the iamge loads in			req = new URLRequest("Images/"+file);			loader.addEventListener(IOErrorEvent.IO_ERROR, loadError);			loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, updateProgress);			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, removePreload);			loader.load(req);						//set up buttons for UI			this.close_btn.addEventListener(MouseEvent.CLICK, closeContainer);			this.close_btn.buttonMode = true;			this.close_btn.mouseChildren = false;						//set text fields which were passed through constructor			//this.title_txt.text = imgTitle;			//this.caption_txt.text = imgCaption;						//listen for button clicks on prev and next			//since these are button objects, they don't need to be set up for interaction			this.back_btn.addEventListener(MouseEvent.CLICK, prevImage);			this.forward_btn.addEventListener(MouseEvent.CLICK, nextImage);						//don't show the forward/next button if we are at the first/last thumbnail			if(imgNumber == totalImages-1) {				this.forward_btn.visible = false;			}						if(imgNumber == 0) {				this.back_btn.visible = false;			}		}				//send an event to the document class which will add the previous iamge		public function prevImage(e:MouseEvent):void {			dispatchEvent( new Event("prevImage", true) );		}				//send an event to the document class which will add the next iamge		public function nextImage(e:MouseEvent):void {			dispatchEvent( new Event("nextImage", true) );		}				//error loading image		public function loadError(e:IOErrorEvent):void {			trace(e.target.message);		}				//update the preloader as the image loads in		public function updateProgress(e:ProgressEvent):void {			var scale:Number = e.bytesLoaded/e.bytesTotal;			this.preloader_mc.circle_mc.scaleX = scale;		}				//remove the preloader once the image has loaded, add the completed image to the display		public function removePreload(e:Event):void {			this.removeChild(preloader_mc);			this.addChild(loader);			loader.x = 50;			loader.y = 10;						//trace to make sure our image has loaded			trace("| --- --- Image Loaded --- --- |");		}				//user has clicked on the close button; fade the movieclip out for one second and wait one second to remove it		public function closeContainer(e:MouseEvent):void {			TweenLite.to(this, .5, {alpha:0});			TweenLite.delayedCall(.5, remove);		}				public function remove():void {			parent.removeChild(this);		}					}	}