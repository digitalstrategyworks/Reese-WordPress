package Classes {		import flash.display.Sprite;	import flash.events.MouseEvent;		import flash.net.URLRequest;	import flash.net.URLLoader;	import flash.events.IOErrorEvent;	import flash.events.Event;	import Classes.Utilities.*;	import com.greensock.TweenLite;		public class ImageViewer extends Sprite {				//stored numbers which will be used to calculate where the mouse hit area is		public var leftMove:Number;		public var rightMove:Number;				//create lists for XML to be parsed into as global variables		public var thumbList:XMLList;		public var imgList:XMLList;		public var titleList:XMLList;		public var captionList:XMLList;				//for xml		public var xmlData:XML;				//the number of thumbnails loaded		//we will use this to draw a container around the thumbs		public var numLoaded:Number = 0;				//variables to load in our xml		public var req:URLRequest = new URLRequest("images.xml");		public var loader:URLLoader = new URLLoader();				//a referencer for all thumbnails created		public var thumbArray:Array = new Array();				//lets us know which image we are viewing in the timeline so we can switch		public var currPosition:uint = 0;				//globalize this imageContainer so that it can be added and removed from the stage by different functions		public var imageContainer:Sprite;				public function ImageViewer() {						//higher framerate will make my slider a bit smoother			stage.frameRate = 48;						//listeners to load in our XML and check for errors			loader.addEventListener(Event.COMPLETE, storeXML);			loader.addEventListener(IOErrorEvent.IO_ERROR, xmlError);			loader.load(req);						//prints a starting statement and sets initial leftMove and rightMove position variables			checkStart();			getMouseMove();						//check to see if the mouse has moved			stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoved);						//mask the thumbContainer with a drawn mask so that it seems to disappear behind a line			thumbContainer_mc.mask = mask_mc;						//listen for thumb to be loaded so that we can draw a container around all thumbs when all are loaded			this.addEventListener("thumbLoaded", updateLoad);						//user has clicked on a thumbnail			this.addEventListener("launchImage", launchImage);						//user has clicked on a back or forward button			this.addEventListener("prevImage", addPreviousImage);			this.addEventListener("nextImage", addNextImage);					}				private function launchImage(e:CustomEvent) {			//output our image variables when the user clicks on a 			trace("| --- --- Launch Image --- --- |");			trace("| " + e.vars[1] + ", " + e.vars[2] + ", " + e.vars[3] + " |");						//add a new imageContainer and put the variables that were passed from the thumbnail click into the constructor			imageContainer = new ImageContainer(e.vars[1], e.vars[2], e.vars[3], e.vars[4], thumbArray.length);						//start the alpha at zero			imageContainer.alpha = 0;						//set our slideshows current position to the thumbnail number so that back and next buttons work			currPosition = e.vars[4];						//add the child and tween the alpha up to 1			this.addChild(imageContainer);			TweenLite.to(imageContainer, .5, {alpha:1});		}				//removes the previous image, creates a new image container and adds it to the stage		private function switchImage(theImage:Object) {			removeChild(imageContainer);			imageContainer = new ImageContainer(theImage.theImg, theImage.theTitle, theImage.theCaption, currPosition, thumbArray.length);			this.addChild(imageContainer);		}				//get the previous image and switch to it		private function addPreviousImage(e:Event) {			currPosition--;			var a:Object = thumbArray[currPosition];			switchImage(a);		}				//get the next image and switch to it		private function addNextImage(e:Event) {			currPosition++;			var a:Object = thumbArray[currPosition];			switchImage(a);		}				//store the xml and then parse it		private function storeXML(e:Event):void {			xmlData = new XML(e.target.data);			parseXML(xmlData);		}				//put our xml into lists and change the title text of the story		private function parseXML(xml:XML):void {			title_txt.text = xml.@title;						thumbList = xml.image.thumbnail;			imgList = xml.image.file;			captionList = xml.image.caption;			titleList = xml.image.title;						//once xml is parsed, create all thumbnails			createThumbs();		}				//we want to create thumbnails.. but we also want to pass in the other xml data so we can launch a request on click		private function createThumbs():void {			for(var i:Number = 0; i< thumbList.length(); i++) {				var thumb:Thumbnail = new Thumbnail(thumbList[i], imgList[i], titleList[i], captionList[i], i);				thumb.x = 200*i;				thumbArray.push(thumb);				thumbContainer_mc.addChild(thumb);			}		}						private function updateLoad(e:CustomEvent):void {			numLoaded++;						//keep track of how many images are loaded			trace(numLoaded, thumbList.length());						//draw container once all thumbnails are loaded			//this is to fix a problem with the MOUSE_OVER of the 			if( numLoaded == thumbList.length() ) {				//i'm assuming all thumbnails are the same size..				var imgWidth:Number = e.vars[1];				var padding:Number = 200-imgWidth;				thumbContainer_mc.drawContainer(padding);			}		}				//error loading xml		private function xmlError(e:IOErrorEvent):void {			trace(e.target.message);		}				//check if the mouse is moving. if it is within the two areas that we want, run functions that make the thumbcontainer slide		private function mouseMoved(e:MouseEvent):void {						//if the mouse is between the absolute left and 130			if( stage.mouseX > leftMove && stage.mouseX < (leftMove + 130) ) {				thumbContainer_mc.moveRight();			} else {				thumbContainer_mc.stopRightMove();			}						//if the mouse is between the absolute right and absright-130			if( stage.mouseX < stage.stageWidth && stage.mouseX > (stage.stageWidth - 130) ) {				thumbContainer_mc.moveLeft();			} else {				thumbContainer_mc.stopLeftMove();			}					}				//set positions for where the absolute left and right hover areas are		private function getMouseMove():void {			leftMove = thumbContainer_mc.originalPos;			rightMove = stage.stageWidth;		}				private function checkStart():void {			trace("| ---  Document On --- --- --- --- |");			trace("| -------------------------------- |");			trace("|                                  |");			trace("|           Seth Wright            |");			trace("|       http://sethawright.com     |");			trace("|                                  |");			trace("|        A simple image viewer     |");			trace("|                                  |");			trace("| -------------------------------- |");		}	}	}