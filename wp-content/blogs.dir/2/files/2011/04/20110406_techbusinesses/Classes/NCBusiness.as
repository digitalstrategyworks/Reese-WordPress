package Classes {		import flash.display.Sprite;	import flash.display.Loader;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import Classes.Utilities.*;	import flash.display.MovieClip;	import flash.events.MouseEvent;	import fl.transitions.Tween;	import fl.transitions.easing.Regular;	import fl.transitions.TweenEvent;	import fl.controls.NumericStepper;	import flash.utils.Timer;	import flash.events.TimerEvent;	import fl.controls.Slider; 	import fl.events.SliderEvent; 	import fl.controls.Label;			public class NCBusiness extends Sprite {				//loader for loading in the XML that contains the info for the locations of server farms		public var loader:URLLoader = new URLLoader();		public var url:URLRequest = new URLRequest("NCBusiness.xml");		public var xml:XML;				//all of the vars for the moving menu buttons		public var moving:Boolean = false;		public var boxInitX:Number;		public var descInitX:Number;		public var gameInitX:Number;		public var locInitX:Number;				//vars for the game portion		public var timer:Timer;		public var taxSlider:Slider = new Slider(); 		public var tempjobsSlider:Slider = new Slider();		public var jobsSlider:Slider = new Slider();		public var gameCounter:Number = 0;				public var taxValueX:Number;		public var tempjobsValueX:Number;		public var jobsValueX:Number;							//globalizes xml lists 		public var bList:XMLList;		public var mcList:XMLList;		public var locationList:XMLList;		public var populationList:XMLList;		public var costList:XMLList;		public var sizeList:XMLList;		public var dateList:XMLList;		public var costsList:XMLList;		public var benefitsList:XMLList;		public var quoteList:XMLList;		public var quoteauthorList:XMLList;		public var sourceList:XMLList;		public var quickList:XMLList;		public var quickmcList:XMLList;				public function NCBusiness() {						intro_mc.visible = true;			game_mc.visible = false;						showGame_btn.buttonMode = true;			locations_btn.buttonMode = true;			desc_btn.buttonMode = true;			intro_mc.buttonMode = true;			game_mc.play_btn.buttonMode = true;						//button event listeners for the nav buttons: showGame_btn, locations_btn, and desc_btn			showGame_btn.addEventListener(MouseEvent.CLICK, showGame);			showGame_btn.addEventListener(MouseEvent.ROLL_OVER, hoverButton);			showGame_btn.addEventListener(MouseEvent.MOUSE_OUT, hoverOutButton);						locations_btn.addEventListener(MouseEvent.CLICK, showLocations);			locations_btn.addEventListener(MouseEvent.ROLL_OVER, hoverButton);			locations_btn.addEventListener(MouseEvent.MOUSE_OUT, hoverOutButton);						desc_btn.addEventListener(MouseEvent.CLICK, showDesc);			desc_btn.addEventListener(MouseEvent.ROLL_OVER, hoverButton);			desc_btn.addEventListener(MouseEvent.MOUSE_OUT, hoverOutButton);						//event listener for the start button inside of the game			game_mc.play_btn.addEventListener(MouseEvent.CLICK, playtheGame);						//event listeners for the loader for the XML			loader.addEventListener(Event.COMPLETE, xmlLoaded);						//check for a load error			loader.addEventListener(IOErrorEvent.IO_ERROR, xmlError);			loader.load(url);		}		/* -------------------------------XML FUNCTIONS-----------------------------*/		public function xmlLoaded(e:Event):void{			xml = new XML(e.target.data);			//trace(xml);			parseXML(xml);		}				//error		public function xmlError(e:IOErrorEvent):void{			trace(e);		}						//parse XML		public function parseXML(xmlB:XML):void{						//lists for all of the data I need from the xml for the bigger server movieclips			bList = xmlB.mainbusinesses.business.@name;			mcList = xmlB.mainbusinesses.business.@mc;			locationList = xmlB.mainbusinesses.business.location;			populationList = xmlB.mainbusinesses.business.location.@population;			costList = xmlB.mainbusinesses.business.cost;			sizeList = xmlB.mainbusinesses.business.size;			dateList = xmlB.mainbusinesses.business.date;			costsList = xmlB.mainbusinesses.business.costs;			benefitsList = xmlB.mainbusinesses.business.benefits;			quoteList = xmlB.mainbusinesses.business.quote;			quoteauthorList = xmlB.mainbusinesses.business.quote.@author;			sourceList = xmlB.mainbusinesses.business.sources;						//lists for the data for the smaller server farm movieclips			quickList = xmlB.quickview.business;			quickmcList = xmlB.quickview.business.@mc;						//loop that loads in the data into the larger server farm movieclips			for (var i:Number=0; i<mcList.length(); i++) {				this[mcList[i]].info_mc.name_txt.text=bList[i];				this[mcList[i]].info_mc.location_txt.text=locationList[i] + ", Pop. "+ populationList[i];				this[mcList[i]].info_mc.cost_txt.text="Cost " + costList[i] + " for " + sizeList[i] + " in " + dateList[i];				this[mcList[i]].info_mc.costs_txt.text=costsList[i];				this[mcList[i]].info_mc.benefits_txt.text=benefitsList[i];				this[mcList[i]].info_mc.quote_txt.text=quoteList[i];				this[mcList[i]].info_mc.quoteauthor_txt.text="- " + quoteauthorList[i];			}			//loop that loads in the data into the smaller server farm movieclips			for (var h:Number=0; h<quickList.length(); h++){				this[quickmcList[h]].info_mc.name_txt.text=quickList[h].@name;				this[quickmcList[h]].info_mc.location_txt.text=quickList[h].location;				this[quickmcList[h]].info_mc.pop_txt.text="Pop. " + quickList[h].location.@population;				this[quickmcList[h]].info_mc.cost_txt.text="Cost " + quickList[h].cost + " to build";							}						}		/* -------------------------------NAVIGATION FUNCTIONS-----------------------------*/		//hover function for the nav buttons		public function hoverButton(e:MouseEvent):void {			e.target.gotoAndStop(2);		}				//roll out function for the nav buttons		public function hoverOutButton(e:MouseEvent):void {			e.target.gotoAndStop(1);		}				public function showLocations(e:MouseEvent):void {			intro_mc.visible = false;			game_mc.visible = false;			desc_mc.visible = false;		}				public function showDesc(e:MouseEvent):void {			desc_mc.visible = true;			game_mc.visible = false;			intro_mc.visible = false;		}				public function showGame(e:MouseEvent):void {			intro_mc.visible = false;			desc_mc.visible = false;			game_mc.visible = true;			game_mc.playGame_mc.visible = false;		}/* -------------------------------GAME FUNCTIONS-----------------------------*/		//this is the function that's called when you click the start button inside of the game		public function playtheGame(e:MouseEvent):void {			game_mc.playGame_mc.visible = true;			game_mc.playGame_mc.stop_mc.visible=false;						//sets a timer that counts to 20 seconds--it starts running once you start the game			timer = new Timer(1000, 20);			timer.addEventListener(TimerEvent.TIMER, timerRun);			timer.addEventListener(TimerEvent.TIMER_COMPLETE, timerDone);			timer.start();						//sets up the slider for taxes in the game			taxSlider.width = 400; 			taxSlider.snapInterval = 10; 			taxSlider.tickInterval = 10; 			taxSlider.maximum = 100; 			taxSlider.value = 1; 			taxSlider.move(-10, 105); 			taxSlider.liveDragging = true;						//sets up the slider for temporary jobs in the game			tempjobsSlider.width = 400; 			tempjobsSlider.snapInterval = 100; 			tempjobsSlider.tickInterval = 100; 			tempjobsSlider.maximum = 1000; 			tempjobsSlider.minimum = 100;			tempjobsSlider.value = 100; 			tempjobsSlider.move(-10, 190);			tempjobsSlider.liveDragging = true;						//sets up the slider for jobs in the game			jobsSlider.width = 400; 			jobsSlider.snapInterval = 50; 			jobsSlider.tickInterval = 50; 			jobsSlider.maximum = 500; 			jobsSlider.value = 10; 			jobsSlider.move(-10, 275);			jobsSlider.liveDragging = true;						//event handlers for each slider			taxSlider.addEventListener(SliderEvent.CHANGE, changeTaxHandler);			tempjobsSlider.addEventListener(SliderEvent.CHANGE, changeTempjobsHandler);			jobsSlider.addEventListener(SliderEvent.CHANGE, changeJobsHandler); 				//adds all of the sliders in the game to the stage			game_mc.playGame_mc.addChild(taxSlider);			game_mc.playGame_mc.addChild(tempjobsSlider);			game_mc.playGame_mc.addChild(jobsSlider);		}		function changeTaxHandler(event:SliderEvent):void { 			//this takes the value of the slider and adds it in the textbox as you play the game			var taxValue = "$" + event.value + " million";			taxValueX = event.value; //this var is used later in the counter			game_mc.playGame_mc.taxValue_txt.text = taxValue;						//these are warnings to help lead the user on the right track			//NOTE: these could totally be done in XML, but I ain't got enough time			if (event.value <= 10){				game_mc.playGame_mc.taxWarning_txt.text = "The CEO of Facespace laughed you out of his office. Less than $10 million? Never."; 				} else if (event.value > 50){					game_mc.playGame_mc.taxWarning_txt.text = "The local paper is running an editorial, saying that you're a pushover. You'd better cut back on tax incentives.";				} else { game_mc.playGame_mc.taxWarning_txt.text = "";}		}		function changeTempjobsHandler(event:SliderEvent):void { 			//this takes the value of the slider and adds it in the textbox as you play the game			var tempjobsValue = event.value + " temporary jobs";			tempjobsValueX = event.value; //this var is used later in the counter			game_mc.playGame_mc.tempjobsValue_txt.text = tempjobsValue;			if (event.value <= 250){				game_mc.playGame_mc.tempjobsWarning_txt.text = "Fewer than 250 jobs? That won't look good for you come the next election...";				//gameCounter --;				} else if (event.value > 600){				game_mc.playGame_mc.tempjobsWarning_txt.text = "Facespace is talking about backing out--they say they don't have the resources to provide that many temp jobs.";				//gameCounter ++;				} else { game_mc.playGame_mc.tempjobsWarning_txt.text = "";}		}		function changeJobsHandler(event:SliderEvent):void { 			//this takes the value of the slider and adds it in the textbox as you play the game			var jobsValue = event.value + " full-time jobs";			jobsValueX = event.value; //this var is used later in the counter			game_mc.playGame_mc.jobsValue_txt.text = jobsValue;			if (event.value <= 50){				game_mc.playGame_mc.jobsWarning_txt.text = "That many tax breaks for fewer than 30 jobs? An outspoken N.C. senator says that's unacceptable, and the public agrees.";				//gameCounter --;				} else if (event.value > 200){					game_mc.playGame_mc.jobsWarning_txt.text = "Facespace says there isn't enough work for more than 200 full-time employees... It's literally just a warehouse full of computers.";				//gameCounter ++;				} else { game_mc.playGame_mc.jobsWarning_txt.text = "";}		}						public function timerRun(e:TimerEvent):void{			//this sets the timer text box so that it counts down to show you how much time is left			game_mc.playGame_mc.timeLeft_txt.text = (20 - e.target.currentCount);		}				public function timerDone(e:TimerEvent):void{			game_mc.playGame_mc.stop_mc.visible=true;						//this makes it so that you can't play with the slider once the timer has stopped			taxSlider.enabled = false;			tempjobsSlider.enabled = false;			jobsSlider.enabled = false;						//there is a counter that adds points based on what the user chooses on the slider. it's here instead of in the above conditionals because otherwise the counter runs up excessively--only the final choices by the user should count			if (taxValueX <= 10){				gameCounter ++;				} else if (taxValueX > 50){				gameCounter --;				} else { trace("okay");}			if (jobsValueX <= 250){				gameCounter --;				} else if (jobsValueX > 600){				gameCounter ++;				} else { trace("okay");}			if (tempjobsValueX <= 50){				gameCounter --;				} else if (tempjobsValueX > 200){				gameCounter ++;				} else { trace("okay");}							trace(gameCounter);						//this loads the text responses into the text box based on how well the user balanced the needs of the company and the needs of the public			if (gameCounter <= -2)			{game_mc.playGame_mc.stop_mc.results_txt.text = "Facespace is more than happy to build their server farm with the deal you've given them, but the public is unhappy. Looks like you won't be getting re-elected. The bill later fails in the N.C. Senate.";}			else if (gameCounter >= 2)			{game_mc.playGame_mc.stop_mc.results_txt.text = "The public is proud of you for standing up for the state... However, Facespace has decided to build their server farm in Virginia instead. Looks like you lose those jobs and the reputation of being a tech-friendly place.";}			else {game_mc.playGame_mc.stop_mc.results_txt.text = "The public is satisfied, and Facespace is also happy with their deal. Good job, governor. There might be a second term in your future...";}		}	}}